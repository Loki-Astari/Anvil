
Anvil VM
========

Address Space
-------------
    Code address space is separate from the data address space.

    Code space can be accessed in a contagious manner (ie incrementing/decrementing a code
    address location will move from the through all the code in the program).

    Data space can **NOT** be accessed contagiously. All objects in data space are contagious
    within the same "Data Frame", but no assumptions can be made about objects in different
    "Data Frames".

    Several registers are used to point to different "Data Frames"
        * Global:       This registers points to the beginning of the global area.
        *               The Ice compiler puts all namespace objects in the Global Data Frame.
        *               The size of the Global Data Frame is specified by the CMD Init instruction.
        *               If you have not used this instruction the default size is 0
        *
        * Frame Pointer:This register points to the beginning of the current data frame.
        *               This is used to store local variables.
        *               If you execute a JUMP Method/Call/Ret this register may change.
        *
        * Stack Pointer:This register points at the end of the current data frame.
        *               Like C++ one past the end.
        *               If the DataFrame is expanded with a new variables this will be increased.
        *
        *               Note: The available space that Stack Pointer can expand into is defined
        *                     by the CMD Init instruction. The default size is 1000
        *
        * This:         This register points at the data frame of the current object you are
        *               working on. Objects are created with a specified size and this should
        *               be built into the code (there is no way to query this at runtime).
        *               Objects are created with ADDR LML <AddrReg> = DataFrame <Size>
        *
        * Extra:        ?

Registers
---------
There is a "PC" register that points at an address in code space.

    PC  Register:

There is a 3 bit "flag" register.
Any operation on a data space memory location to an Integer can affect the conditions of the flags.
    eg. SET or arithmetic operation
A code instruction that does a comparison "CMP" has the effect of doing LHS - RHS the result of
this operation sets the flags as if we had set a memory location


    0:      Zero:       A memory location was just set to zero (or a comparison was equal)
    1:      Pos:        A memory location was just set to a positive value (or a comparison right was smaller)
    2:      Neg:        A memory location was just set to a negative value (or a comparison right was greater)

Any conditional instructions has a 4 bit FFFF section of the instruction.
    The bottom 3 bits of this flag are anded against the 3 bit flag register.
    If bit 3 of the FFFF flag is set the result is noted.
    If the resulting value is non zero the instruction is executed.

    CMP Cp Expr-1 56        // Compare the value in data space pointed at by Expr-1 with 56
                            // This sets the flags abvove:  If they are equal bit zero is set.

    JUMP JP REL EQ  123     // EQ => 0001
                            //  if (flagReg & 001) {
                            //      Jump relative 123 positions
                            //  }
    JUMP JP REL NE  123     // NE => 1001
                            //  if (!(flagReg & 001) {
                            //      Jump relative 123 positions
                            //  }
    JUMP JP REL LE 123      // LE => 0101       (both neg and zero flags set)
                            //  if ((flagReg & 101) {
                            //      Jump relative 123 positions
                            //  }
    JUMP JP REL 123         // Unconditional Jump FFFF = 0000

There are eight "Address" Registers (16 bit) that point at locations in a "Data Frame" (data space).

    Global
    Frame Pointer
    Stack Pointer
    This

    Extra
    Expr-1
    Expr-2
    Expr-3

There are zero "data" registers.


Code Memory Locations
---------------------
    Code memory has no concept of type (other than they are 16 bit integers) each memory
    location is individually addressable and hold 16 bit instructions or 16 bit data objects.

Data Memory Locations
---------------------
    Data memory locations represent objects of specific types.


        0: Void                                 set to make sure resources are released.
        1: Code Address Location:               Used to store the PC (eg for calls)/.
        2: Data Address Location:               Pointer to an object in a Data Frame.
        3: A Data Frame:                        Used to represent an object.
        4: A 32 bit integer
        5: A string
        6: An array of Data Frames
        7: A map of String to Data Frame

Instructions
------------

Invalid:
    To give some testing flexability.
    All instructions Ending with 0xFF are invalid and will cause the VM to halt.
        0xFFFF          => Invalid Action.
        0x0FFF          => Invalid CMD
        0x1FFF          => Invalid Jump
        0x2FFF          => Invalid Move
        0x3FFF          => Invalid Load

Instructions:
    CMD NoOp                                    Does nothing.
    CMD Kill <Value>                            Stops the application with the return code value.
    CMD Init <GlobalSize> <StackSize>           Initializes the VM with space for Global objects
                                                and space for a stack which is used to store local
                                                variables used in code.
    CMD Import Load <reg1> <Name>               Load the C++ shared libary:  Anvil/lib<Name>.<plat-shared-lib-extension>
                                                Store the resulting void* reference in the memory pointed at by reg1.
    CMD Import GetSymbol <reg1> <reg2> <Name>   Get the address of the C++ function <Name> from the C++ shared library
                                                loaded by `CMD Import Load' whose reference is stored in reg1 and store
                                                the void* for this function in memory pointed at by reg2.
    CMD Import Call <reg1> <reg2>               reg1 points at the memory location that contains the void* retrieved by
                                                `CMD Import GetSymbol`. reg2 points at a DataFrame that holds the parameters.
                                                as per the standard calling conventions.
                                                This calls the C++ code.
    CMD Import UnLoad <reg1>                    Unloads the shared library.
    -----------------------------
    JUMP JP <Condition> <Relative-22 bit>       Jump instructions happen conditionally on the "Flag" register
                                                Jumps relative to the pc (after this instruction complete).
    JUMP Call <Label>                           Note: Previous code is supposed to set up space for the
                                                      return value and parameters used by the call.
                                                      and subsequent code removes parameters and result
                                                      from the Stack Frame.
                                                Saves in the current Frame the registers.
                                                    PC/Frame Pointer/This
                                                Updates the registers:
                                                    PC:             To the location of <Label>
                                                    FramePointer:   To the location of new StackFrame.
                                                    StackPointer:   = FramePointer.
                                                    This:           Unchanged.
    JUMP Method <Reg> <Method Offset>           Like the call instructions.
                                                Note: The destination address is looked up by using "Reg"
                                                      as a pointer to a data frame and "Method Offset" is
                                                      the offset into the data frame that we have stored
                                                      the 32 bit destination address.
                                                Different from "Call"
                                                    This:           is changed to the value of <Reg>
    JUMP Ret <Condition>                        Ret like Jp instructions are conditional.
                                                If Stack and Frame pointers are not equal it fails.
                                                Updates the registers:
                                                    PC:             to the location pre Call/Method
                                                    This:           to the location pre Call
                                                    Frame Pointer:  to the location pre Call
                                                    Stack Pointer:  to the location pre Call
    -------------------------------
    ADDR LRR <Reg1> = <Reg2> + <offset>         Load Register from Register:
                                                    Reg1 = Reg2 + offset.
    ADDR LRP <Reg1> = <Reg2> + <offset>         Load Register from Pointer: 
                                                    Reg1 = *(Reg2 + offset)
                                                    The location pointed at must contain a
                                                        Data Address or Data Frame
    ADDR LMR <Reg1> = <Reg2> + <offset>         Load Memory from Register
                                                    *Reg1 = Reg2 + offset
    ADDR LMP <Reg1> = <Reg2> + <offset>         Load Memory from Pointer
                                                    *Reg1 = *(Reg2 + offset)
    ADDR LML <Reg1> = <Literal>                 Load Memory from Literal
                                                    Literal = CodeAddress <Address of code>
                                                            | DataFrame <FrameSize>
                                                            | Int <IntValue>
                                                            | String "<StringValue>"
    ADDR INC <Reg> <Value>                      Reg = Reg + <Value>
    ADDR DEC <Reg> <Value>                      Reg = Reg - <Value>
    -------------------------------



Bit Patterns of Instructions:
=============================

    16 Bit: 4 bit cmd 12 bits that are command specific.

    0000 = CMD

        CMD Action<3bit>

        CMD NoOp            00000 0000 0000
        CMD Kill            001x xxxx xxxx     9 bit result code
        CMD Init            010S xxxx xxxx     S Size Info
                                                0:     8 bit global size 16 bit stack size.
                                                1:     8 bit global size 32 bit stack size.
        CMD Init            011S xxxx xxxx     S Size Info
                                                0:     8 bit ignored. 16 bit global size 16 bit stack size.
                                                1:     8 bit ignored. 16 bit global size 32 bit stack size.
        CMD Import          100T TTRR Rxxx     TTT: Import Action
                                                000 Load
                                                001 Get Symbol
                                                010 Call
                                                011 Un-Load

                                                RRR Register to use as the address (See below)
                                                CMD Import Load Expr-1 libName
                                                    Calls dlopen() stores it in the location pointing
                                                    at by Expr-1
                                                CMD Import GetSymbol Expr-1 Expr-2 symbolName
                                                    Calls dlsym() stores the result in Expr-1.
                                                    Expr-2 points at the location where you
                                                    can find the result of dlopen().

        Note: We can add some instruction where the prefix is: 0000 00 As long as 1 of the following bits is set.

--------------------------------------------------------------------------------------------------
    0001 = JUMP
        Change the address of the PC.

        JUMP Type<3> Flag<3> Offset<6>

        Type:   000         Ret             0001 000F FF?? ????
                001         Method          0001 111R RROO OOOO     6 bit
                011         Jp              0001 101F FFOO OOOO     22 bit      unsigned 22
                101         Call            0001 110R RR?? ????     32 bit

        Flags:  000        Always              AL
                001        Equal               EQ
                010        Greater             GT
                011        Greater or Equal    GE
                100        Less                LT
                101        Less or Equal       LE
                110        Less or Greater     NE
                111        Equal Less Greater  XX

                        X       Y           L G E
                CMP     5       5           0 0 1
                CMP     5       3           0 1 0
                CMP     5       8           1 0 0

        FFFF    Flags to check. Jump if ((FFFF & Flag Register) == 0)
        Rel:    Read the next 16 byte value (interpret it as signed integer) add to pc.
        Abs:    Read the next 32 byte value (Interpret it as unsigned integer) load into pc.
        Mem:    Read the next 16 byte value (Interpret it as singed) add this to the RRR register
                read the value from that memory location (must have type of Code Address Location)
        RRR:   Register number:
                        000         Global
                        001         Frame Pointer
                        010         This
                        011         Extra

                        100         Stack Pointer
                        1nn         Expr-nn

        Note:   The PC will already have been incremented prior to the JUMP being executed.
                This is relevant to "Rel"ative jumps as the offset will be relative the next location.

        Call:   Write the PC to the memory location pointed at by the "Stack Pointer"
                Increment the "Stack Pointer"
                Write Current "Frame Pointer" to the memory location pointed at by the "Stack Pointer"
                Increment the "Stack Pointer"
                Write Current "This Pointer" to the memory location pointed at by the "Stack Pointer"
                Increment the "Stack Pointer"
                Set the "Frame Pointer" equal to the "Stack Pointer"

        Return: If the "Frame Pointer" and "Stack Pointer" are not equal "Halt"
                Decrement the "Stack Pointer"
                Read the memory location pointed at by "Stack Pointer" assign it to "This"
                Decrement the "Stack Pointer"
                Read the memory location pointed at by "Stack Pointer" assign it to "Frame Pointer"
                Note: must be "Data Address Location" or "Halt"
                Decrement the "Stack Pointer"
                Read the memory location pointed at by "Stack Pointer" assign it to PC
                Note: must be "Code Address Location" or "Halt"
                Decrement the "Stack Pointer"

        Calling convention:
            Old Frame Pointer->         Return Value
                                        Parameter-0
                                        ...
                                        Parameter-(n-2)
                                        Parameter-(n-1)
                                        Saved PC
                                        Saved "Frame Pointer"
                                        Saved "This"
            Frame/Stack Pointer         Next Space.

            When executing a function. The last parameter can be found at "Frame Pointer" - 3, the second to last parameter can be found at "Frame Pointer" - 4 etc.
            On a return the value being returned should be copied to the location pointed at by the old "Frame Pointer".

            Thus we can summarize the calling convention as:

                1: Increment "Stack Pointer"            (Make room for return value)
                2: Initiate parameters:
                      For each parameter
                        Save parameter at "Stack Pointer"
                        Increment "Stack Pointer"
                3: Call function:
                    JUMP Call <Function>

                4: Execute function Body
                5: Copy the result value out to the result location.

                5: Return to call point
                    Jump Return
                6: Destroy Parameters.
                      For each parameter
                        Decrement the "Stack Pointer"
                        Note if appropriate the compiler should plant appropriate code
                        to destroy the object by calling its destructor.
                        Then setting the memory location pointed at by SP to Void.

    0010 = Move Address Register
        Move what an address register is pointing at.

        Move XX Actions<2> Register<2>

            Inc XX          00XX BBBB BBBB      Increment XX by BBBB BBBB
            Dec XX          01XX BBBB BBBB      Decrement XX by BBBB BBBB
            Push XX         10XX ---- -RRR      Read next 16 byte value (interpreted as signed) add to register RRR.
                                                Copy the value at this calculated location to the value pointed at by XX.
                                                Increment the XX.
            Pop XX          11XX ---- -RRR      Decrement the XX.
                                                Read next 16 byte value (interpreted as signed) add to register RRR.
                                                Copy the value pointed at by XX to the calculated location.
                                                    // I would like to do this:
                                                    //      Set the location pointed at by XX to Void.
                                                    //      But for some object we need to call destructor
                                                    //      first so this may need to be a=explicit manual
                                                    //      step planted by the compiler.

            XX  =>  00      Stack Pointer
                    01      Expr-1
                    10      Expr-2
                    11      Expr-3

    0011 = Load Address Register

        Load RRR 

--------------------------------------------------------------------------------------------------
    0002 = ADDR
        Change the address of the PC.

        ADDR Type<3>
            000     LRR
            001     LRP
            010     INC
            011     DEC
            100     LMR
            101     LMP
            110     LML


            Type:
                ADDR<4> LRR<3> R1<3> R2<3> addType<3>
                    LRR             Load register from register
                                        Ass:        ADDR LRR Expr-1 = Expr-2 + 1
                                        Meaning:    Expr-1 = (Expr-2 + Offset)

                ADDR<4> LRP<3> R1<3> R2<3> addType<3>
                    LRP             Load register from memory pointed at by register.
                                        Ass:        ADDR LRP Expr-1 = Expr-2 + 1
                                        Meaning:    Expr-1 = *(Expr-2 + Offset)
                                        Value in location must be a DataAddress or DataFrame (gets the address of the DataFrame)
                                        Inverse of LMP!

                ADDR<4> INC<3> R1<3> Value<6>
                    INC             Increment register. Add 6 byte to R1:
                                        Ass:        ADDR INC Expr-1 12
                                        Meaning:    Expr1 = Expr1 + 12
                ADDR<4> DEC<3> R1<3> Value<6>
                    DEC             Decrement register. Sub 6 byte from R1:
                                        Ass:        ADDR DEC Expr-1 12
                                        Meaning:    Expr1 = Expr1 - 12

                ADDR<4> LMR<3> R1<3> R2<3> addType<3>
                    LMR             Load Memory from register
                                        Ass:        ADDR LMR Expr-1 = Expr-2 + Offset
                                        Meaning:    *(Expr) = Expr-2 + Offset
                                        Inverse of LRP!

                ADDR<4> LMP<3> R1<3> R2<3> addType<3>
                    LMP             Load Memory from pointer.
                                        Ass:        ADDR LMP Expr-1 = Expr-2 + 1
                                        Meaning:    *(Expr-1) = *(Expr2 + Offset)
                                        Copies one memory location to another.

                ADDR<4> LML<3> R1<3> TypeInfo<3>
                    LML             Load register Literal Value
                                        Ass:        ADDR LML Expr-1 = CodeAddress <Label>       // label in next 2 Instructions.
                                                                    = DataFrame <Size>          // Size in next Instruction
                                                                    = Int <Value>               // Value in next 2 Instructions
                                                                    = String "XXXXX"            // Stored as size in next Instruction followed by even number of bytes zero padded.
                                                                    = DataAddress               // ????
                                                                    = Array                     // ???
                                                                    = Map                       // ???
                                        Meaning:    *(Expr-1) = new Data(Values)

            addType:
                000:    No offset (effectively + 0)
                001:    Value in next byte

            TypeInfo:
                000:    CodeAddress
                001:    DataFrame
                010:    Int
                011:    String



